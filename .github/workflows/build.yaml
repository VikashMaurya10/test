name: CI - Lint, Build, and Env Check

on:
  pull_request:
    branches:
      - master

jobs:
  lint-build-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    env:
      API_URL: ${{ secrets.API_URL }}
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXT_AUTH_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXT_AUTH_APP_URL }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Dependencies
        run: bun install

      - name: Install Reviewdog (dev deps)
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b . latest

      - name: Run ESLint and report via Reviewdog
        continue-on-error: true
        run: |
          bun run lint . -f json | tee eslint_output.json | ./reviewdog -f=eslint -name="eslint" -reporter=github-pr-review -fail-on-error=false

      - name: Check Environment Variables
        run: |
          echo "Checking required ENV variables..."
          test -n "$API_URL" && echo "API_URL loaded"
          test -n "$NEXT_PUBLIC_APP_URL" && echo "NEXT_PUBLIC_APP_URL loaded"
          test -n "$NEXTAUTH_SECRET" && echo "NEXTAUTH_SECRET loaded"
          test -n "$NEXTAUTH_URL" && echo "NEXTAUTH_URL loaded"

      - name: Run Build and Capture Result
        id: buildstep
        continue-on-error: true
        run: |
          bun run build 2>&1 | tee build.log
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      - name: Comment Build Failure on PR
        if: steps.buildstep.outputs.exit_code != '0'
        run: |
          # Strip ANSI codes and save cleaned log
          sed -r "s/\x1B\[[0-9;]*[mK]//g" build.log > cleaned_build.log

          # Extract last 30 lines (or fewer if log is short)
          tail -n 30 cleaned_build.log > short_build.log

        shell: bash

      - name: Comment Build Failure on PR
        if: steps.buildstep.outputs.exit_code != '0'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const log = fs.readFileSync('short_build.log', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Build failed.**\n\n\`\`\`log\n${log.trim()}\n\`\`\``
            });

      - name: Fail Workflow if Build Failed
        if: steps.buildstep.outputs.exit_code != '0'
        run: exit 1

      - name: Comment Setup Success on PR
        if: steps.buildstep.outputs.exit_code == '0' && success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "✅ All setup completed. Ready to deploy on server."
            })
          
